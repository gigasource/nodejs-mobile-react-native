
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
    }
}

apply plugin: 'com.android.library'

def _nodeTargetSdkVersion = ((rootProject?.ext?.properties?.targetSdkVersion) ?: 22)
def _nodeMinSdkVersion = ((rootProject?.ext?.properties?.minSdkVersion) ?: 16)
def _compileNativeModulesSdkVersion = _nodeMinSdkVersion;
if (_compileNativeModulesSdkVersion<21) {
    // 21 is the minimum sdk version Node is built with.
    _compileNativeModulesSdkVersion=21;
}
def DoesAppAlreadyDefineWantedSTL() {
    // Since react-native 0.59.0, the Application already defines libc++_shared as the APP_STL.
    // Defining it also in this plugin would lead to a build error when merging assets.
    try {
        def _reactAndroidPropertiesFile = file("${rootDir}/../node_modules/react-native/ReactAndroid/gradle.properties");
        def _reactAndroidProperties = new Properties()
        if (_reactAndroidPropertiesFile.exists())
        {
            _reactAndroidPropertiesFile.withInputStream { _reactAndroidProperties.load(it) }
        }
        def _semver = _reactAndroidProperties.getProperty("VERSION_NAME").tokenize('.');
        if (_semver.size() != 3) {
            return false
        }
        def _major = _semver[0].toInteger()
        def _minor = _semver[1].toInteger()
        if ( _major > 0 || (_major == 0 && _minor >= 59) ) {
            return true
        } else {
            return false
        }

    } catch ( Exception e ) {
        return false
    }
}

def _isCorrectSTLDefinedByApp = DoesAppAlreadyDefineWantedSTL()

android {
    compileSdkVersion ((rootProject?.ext?.properties?.compileSdkVersion) ?: 23)
    buildToolsVersion ((rootProject?.ext?.properties?.buildToolsVersion) ?: "23.0.1")

    defaultConfig {
        minSdkVersion _nodeMinSdkVersion
        targetSdkVersion _nodeTargetSdkVersion
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
        }
        ndk {
            abiFilters = project(":app").android.defaultConfig.ndk.abiFilters
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs 'libnode/bin/'
        }
        main.assets.srcDirs += '../install/resources/nodejs-modules'
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.facebook.react:react-native:+'
}

task CopyNodeProjectAssetsFolder (type:Sync) {
    description "Copies the Node Project to a build folder for manipulation."
    from "${rootProject.projectDir}/../nodejs-assets/nodejs-project-android"
    into "${rootProject.buildDir}/nodejs-assets/nodejs-project/"
    exclude '**/*~' // temporary files
    exclude '**/.*' // files and dirs starting with .
    exclude '**/*.gz' // gzip files will cause errors on aapt when merging assets.
}

task GenerateNodeProjectAssetsLists {
    dependsOn "CopyNodeProjectAssetsFolder"
    description "Generates a list for runtime copying"
    inputs.dir "${rootProject.buildDir}/nodejs-assets/"
    outputs.file "${rootProject.buildDir}/nodejs-assets/file.list"
    outputs.file "${rootProject.buildDir}/nodejs-assets/dir.list"
    doLast{
        delete "${rootProject.buildDir}/nodejs-assets/file.list"
        delete "${rootProject.buildDir}/nodejs-assets/dir.list"

        ArrayList<String> file_list_arr = new ArrayList<String>();
        ArrayList<String> dir_list_arr = new ArrayList<String>();
        String file_list = "";
        String dir_list = "";

        def assets_tree = fileTree(dir: "${rootProject.buildDir}/nodejs-assets/")
        assets_tree.include('nodejs-project/**') // Include the node project.
        assets_tree.exclude('**/.*') // Exclude files and dirs starting with .
        assets_tree.exclude('**/*~') // Exclude temporary files.
        assets_tree.visit { assetFile ->
            if (assetFile.isDirectory()) {
                dir_list_arr.add("${assetFile.relativePath}\n");
            } else {
                file_list_arr.add("${assetFile.relativePath}\n");
            }
        }

        //Ensure both files are ordered similarly across builds.
        Collections.sort(file_list_arr);
        Collections.sort(dir_list_arr);

        def file_list_path = new File( "${rootProject.buildDir}/nodejs-assets/file.list")
        for (String file : file_list_arr){
            file_list += file;
        }
        file_list_path.write file_list

        def dir_list_path = new File( "${rootProject.buildDir}/nodejs-assets/dir.list")
        for (String dir : dir_list_arr){
            dir_list += dir;
        }
        dir_list_path.write dir_list
    }
}

project.android.sourceSets.main.assets.srcDirs+="${rootProject.buildDir}/nodejs-assets/"


tasks.getByPath(":${project.name}:preBuild").dependsOn GenerateNodeProjectAssetsLists
